-- 3) 함수
SELECT PROFESSOR_NAME AS "교수 이름", 
        ABS(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 2), 'YY'))) AS "나이"
FROM TB_PROFESSOR
ORDER BY "나이";

-- 5) 함수
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_SSN, 1, 2) + 20 >= EXTRACT(YEAR FROM ENTRANCE_DATE);

-- 6) 함수
SELECT TO_DATE(201225)
FROM DUAL;
--> 금요일

-- 8) 함수
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE NOT STUDENT_NO LIKE 'A%';

-- 9) 함수
SELECT ROUND(AVG(POINT), 1) AS "평점"
FROM TB_GRADE
GROUP BY STUDENT_NO
HAVING STUDENT_NO = 'A517178';

-- 11) 함수
SELECT COUNT(*)
FROM TB_STUDENT
GROUP BY COACH_PROFESSOR_NO
HAVING COACH_PROFESSOR_NO IS NULL;

-- 13) 함수
SELECT DEPARTMENT_NO, NVL(COUNT(*), 0)
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO, NVL(휴학생수, 0)
FROM (SELECT DEPARTMENT_NO, COUNT(*) AS "휴학생수"
        FROM TB_STUDENT
    WHERE ABSENCE_YN = 'Y'
    GROUP BY DEPARTMENT_NO
    ORDER BY DEPARTMENT_NO)
LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO);

SELECT DEPARTMENT_NO, COUNT(*)
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
AND DEPARTMENT_NO = '002'
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO, NVL(COACH_PROFESSOR_NO, 0)
FROM TB_STUDENT
ORDER BY DEPARTMENT_NO;

-- 답지 예시
SELECT DEPARTMENT_NO 학과코드명, COUNT(DECODE(ABSENCE_YN, 'Y', 1)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

-- 15) 함수
SELECT TERM_NO, POINT
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", AVG(POINT) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY SUBSTR(TERM_NO, 1, 4);

--------------------------------------------------------------------------------

-- 5) 옵션
SELECT STUDENT_NO, POINT
FROM TB_GRADE
WHERE TERM_NO = '200402'
AND CLASS_NO = 'C3118100'
ORDER BY POINT DESC, STUDENT_NO ASC;

-- 8) 옵션
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_PROFESSOR USING (DEPARTMENT_NO);

-- 9) 옵션
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE CATEGORY = '인문사회'; -- 결과 412행

-- 10) 옵션
SELECT STUDENT_NO, STUDENT_NAME, "전체 평점";

-- 11) 옵션
SELECT DEPARTMENT_NAME AS "학과이름", STUDENT_NAME AS "학생이름",
       PROFESSOR_NAME AS "지도교수이름"
FROM TB_DEPARTMENT
JOIN TB_STUDENT USING (DEPARTMENT_NO)
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
WHERE STUDENT_NO = 'A313047';

-- 답지 예시
SELECT DEPARTMENT_NAME, STUDENT_NAME, PROFESSOR_NAME
FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
    JOIN TB_PROFESSOR ON(PROFESSOR_NO = COACH_PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047';

-- 13) 옵션 (JOIN 한 번 더 생각)
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS --/ NULL일 수 있는 테이블부터 먼저 와야지
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
LEFT JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
WHERE CATEGORY = '예체능'
AND PROFESSOR_NO IS NULL;

-- 15) 옵션

------------------------------------------------------------------------------------

-- 3) DDL 제약 조건 이름 넣어보자
ALTER TABLE TB_CATEGORY ADD PRIMARY KEY(NAME);

-- 7) DDL

-- 9) DDL 제약 조건 이름 넣어보자
ALTER TABLE TB_DEPARTMENT 
ADD FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);

-- 12) DDL
CREATE OR REPLACE VIEW VW_DEPT_STD_COUNT
AS SELECT DEPARTMENT_NAME, COUNT(*)
    FROM TB_DEPARTMENT
    JOIN TB_STUDENT USING (DEPARTMENT_NO)
    GROUP BY DEPARTMENT_NAME;
--/ must name this expression with a column alias

-- 답지 예시
CREATE OR REPLACE VIEW VIEW_학과별학생수(DEPARTMENT_NAME, STUDENT_COUNT)
AS SELECT DEPARTMENT_NAME, COUNT(*)
   FROM TB_DEPARTMENT
        JOIN TB_STUDENT USING(DEPARTMENT_NO)
   GROUP BY DEPARTMENT_NAME;

-- 15) DDL
-- TERM_NO -> 2008, 2007, 2006
-- CLASS_NO 별
-- STUDENT_NO의 수
--
--CREATE OR REPLACE VIEW POP_CLASS (과목번호, 과목이름, 누적수강생수)
--AS (SELECT CLASS_NO, CLASS_NAME, COUNT(*)
--    FROM TB_CLASS
--    JOIN TB_GRADE USING(CLASS_NO)
--    GROUP BY CLASS_NO) --/ not a GROUP BY expression
--ORDER BY TERM_NO DESC;
--    
--SELECT CLASS_NO, CLASS_NAME, 학생수
--FROM 

-- TERM_NO(2006-2008), CLASS_NAME, SUM 학생수

SELECT CLASS_NO, CLASS_NAME, COUNT(STUDENT_NO)
FROM (SELECTTB_CLASS
JOIN TB_GRADE USING (CLASS_NO);

-----------------------------------------------------------------------------
